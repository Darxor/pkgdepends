% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkg-dependencies.R
\name{pkg_deps}
\alias{pkg_deps}
\title{R6 class for package dependency lookup}
\description{
Create a \code{pkg_deps} object to look up dependencies of R packages.
}
\details{
The usual steps to query package dependencies are:
\enumerate{
\item Create a \verb{\pkg_deps} object via \code{pkg_deps$new()}.
\item Resolve all possible dependencies via \code{pkg_deps$resolve()}.
\item Solve the dependencies, to obtain a subset of all possible
dependencies that can be installed together, via \code{pkg_deps$solve()}.
\item Call \code{pkg_deps$get_solution()} to list the result of the dependency
solver.
}
}
\section{Methods}{\preformatted{pkg_deps$new()
pkg_deps$get_refs()
pkg_deps$get_config()
pkg_deps$resolve()
pkg_deps$async_resolve()
pkg_deps$get_resolution()
pkg_deps$solve()
pkg_deps$get_solution()
pkg_deps$draw()
pkg_deps$format()
pkg_deps$print()
}
\subsection{new()}{\preformatted{pkg_deps$initialize(
  refs,
  config = list(),
  remote_types = NULL)
}

Create a new \code{pkg_deps} object. The object can be used to look up
(recursive) dependencies of R packages from various sources. To perform
the actual lookup, you’ll need to call the `
\subsection{Parameters}{
\itemize{
\item \code{refs}: Package names or references. See \link{pkg_refs} for
the syntax.
\item \code{config}: Configuration options, a named list. See
\link{pkg_config}.
\item \code{remote_types}: Custom remote ref types, this is for advanced use,
and experimental currently.
}
}

\subsection{Returns}{

A new \code{pkg_deps} object.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("r-lib/pkgdepends")
pd
}\preformatted{## <pkg_dependencies>
## + refs:
##   - r-lib/pkgdepends
## (use `$resolve()` to resolve dependencies)
## (use `$solve()` to solve dependencies)
}
}

}

\subsection{get_refs()}{\preformatted{pkg_deps$get_refs()
}

The package refs that were used to create the \code{pkg_deps} object.
\subsection{Returns}{

A character vector of package refs that were used to create the
\code{pkg_deps} object.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new(c("pak", "jsonlite"))
pd$get_refs()
}\preformatted{## [1] "pak"      "jsonlite"
}
}

}

\subsection{get_config()}{\preformatted{pkg_deps$get_config()
}

Configuration options for the \code{pkg_deps} object. See
\link{pkg_config} for details.
\subsection{Returns}{

Named list. See \link{pkg_config} for the configuration
options.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("pak")
pd$get_config()
}\preformatted{## + config:
##   - library: /var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T//RtmpOjchk0/file13d2e1e996f40
##   - cache_dir: /var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T//RtmpOjchk0/file13d2e24ad495f
##   - package_cache_dir: <default>
##   - metadata_cache_dir: /var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T//RtmpOjchk0/file13d2e6cac0ec8
##   - platforms: macos, source
##   - cran-mirror: https://cloud.r-project.org
##   - dependencies: direct: Depends, Imports, LinkingTo, indirect: Depends, Imports, LinkingTo
##   - r-versions: 3.6.1
}
}

}

\subsection{resolve()}{\preformatted{pkg_deps$resolve()
}

Resolve the dependencies of the specified package references. This
usually means downloading metadata from CRAN and Bioconductor, unless
already cached, and also from GitHub if GitHub refs were included,
either directly or indirectly. See \link{pkg_resolution}
for details about dependency resolution.
\subsection{Returns}{

The same as the \code{get_resolution()} method (see below), the result of the
resolution, invisibly.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("pak")
pd$resolve()
pd
}\preformatted{## <pkg_dependencies>
## + refs:
##   - pak
## + has resolution (+43 dependencies)
## (use `$get_resolution()` to see resolution results)
## (use `$solve()` to solve dependencies)
}
}

}

\subsection{async_resolve()}{\preformatted{pkg_deps$async_resolve()
}

The same as \code{resolve()}, but asynchronous. This method is for advanced
use.
\subsection{Returns}{

A deferred value.
}

}

\subsection{get_resolution()}{\preformatted{pkg_deps$get_resolution()
}

Query the result of the dependency resolution. This method can be called
after \code{resolve()} has completed.
\subsection{Returns}{

A \link{pkg_resolution_result} object, which is
also a tibble. See \link{pkg_resolution_result}
for its columns.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("r-lib/pkgdepends")
pd$resolve()
pd$get_resolution()
}\preformatted{## # A tibble: 89 x 26
##    ref   type  direct status package version license needscompilation
##    <chr> <chr> <lgl>  <chr>  <chr>   <chr>   <chr>   <lgl>           
##  1 r-li~ gith~ TRUE   OK     pkgdep~ 0.0.0.~ MIT + ~ TRUE            
##  2 asse~ stan~ FALSE  OK     assert~ 0.2.1   <NA>    FALSE           
##  3 back~ stan~ FALSE  OK     backpo~ 1.1.4   <NA>    FALSE           
##  4 base~ stan~ FALSE  OK     base64~ 0.1-3   <NA>    FALSE           
##  5 callr stan~ FALSE  OK     callr   3.3.1   <NA>    FALSE           
##  6 cli   stan~ FALSE  OK     cli     1.1.0   <NA>    FALSE           
##  7 clia~ stan~ FALSE  OK     cliapp  0.1.0   <NA>    FALSE           
##  8 cray~ stan~ FALSE  OK     crayon  1.3.4   <NA>    FALSE           
##  9 curl  stan~ FALSE  OK     curl    4.1     <NA>    FALSE           
## 10 desc  stan~ FALSE  OK     desc    1.2.0   <NA>    FALSE           
## # ... with 79 more rows, and 18 more variables: priority <chr>,
## #   md5sum <chr>, sha256 <chr>, filesize <int>, built <chr>,
## #   platform <chr>, rversion <chr>, repodir <chr>, target <glue>,
## #   deps <list>, mirror <chr>, sources <list>, remote <list>,
## #   error <list>, metadata <list>, extra <list>, dep_types <list>,
## #   cache_status <chr>
}
}

}

\subsection{solve()}{\preformatted{pkg_deps$solve()
}

Solve the package dependencies. Out of the resolved dependencies, it
works out a set of packages, that includes all directly specified
packages, and all required (or suggested, depending on the
configuration) packages as well. It includes every package at most once.
See \link{pkg_solution} for details.

\code{solve()} calls \code{resolve()} automatically, if it hasn’t been called yet.
\subsection{Returns}{

The same as the \code{get_solution()} method, the result, invisibly.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("r-lib/pkgdepends")
pd$resolve()
pd$solve()
pd
}\preformatted{## <pkg_dependencies>
## + refs:
##   - r-lib/pkgdepends
## + has resolution (+44 dependencies)
## + has solution
## (use `$get_resolution()` to see resolution results)
## (use `$get_solution()` to see solution results)
## (use `$draw()` to draw the dependency tree)
}
}

}

\subsection{get_solution()}{\preformatted{pkg_deps$get_solution()
}

Returns the solution of the package dependencies.
\subsection{Returns}{

A \link{pkg_solution_result} object, which is a
list. See \link{pkg_solution_result} for details.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("pkgload")
pd$resolve()
pd$solve()
pd$get_solution()
}\preformatted{## <pkg_solution>
## + result: OK
## + refs:
##   - pkgload
## + constraints (61):
##   - select pkgload exactly once
##   - select assertthat at most once
##   - select backports at most once
##   - select callr at most once
##   - select cli at most once
##   - select crayon at most once
##   - select desc at most once
##   - select magrittr at most once
##   - select pkgbuild at most once
##   - select prettyunits at most once
##   ...
## + solution:
##   - assertthat
##   - backports
##   - callr
##   - cli
##   - crayon
##   - desc
##   - magrittr
##   - pkgbuild
##   - pkgload
##   - prettyunits
##   - processx
##   - ps
##   - R6
##   - rlang
##   - rprojroot
##   - rstudioapi
##   - withr
}
}

}

\subsection{draw()}{\preformatted{pkg_deps$draw()
}

Draw a tree of package dependencies. It returns a \code{tree} object, see
\code{\link[cli:tree]{cli::tree()}}. Printing this object prints the
dependency tree to the screen.
\subsection{Returns}{

A \code{tree} object from the cli package, see
\code{\link[cli:tree]{cli::tree()}}.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("pkgload")
pd$solve()
pd$draw()
}\preformatted{## pkgload (1.0.2)
## +-desc (1.2.0)
## | +-assertthat (0.2.1)
## | +-R6 (2.4.0)
## | +-crayon (1.3.4)
## | \-rprojroot (1.3-2)
## |   \-backports (1.1.4)
## +-pkgbuild (1.0.5)
## | +-callr (3.3.1)
## | | +-processx (3.4.1)
## | | | +-ps (1.3.0)
## | | | \-R6 (2.4.0)
## | | \-R6 (2.4.0)
## | +-cli (1.1.0)
## | | +-assertthat (0.2.1)
## | | \-crayon (1.3.4)
## | +-crayon (1.3.4)
## | +-desc (1.2.0)
## | | +-assertthat (0.2.1)
## | | +-R6 (2.4.0)
## | | +-crayon (1.3.4)
## | | \-rprojroot (1.3-2)
## | |   \-backports (1.1.4)
## | +-prettyunits (1.0.2)
## | | +-magrittr (1.5)
## | | \-assertthat (0.2.1)
## | +-R6 (2.4.0)
## | +-rprojroot (1.3-2)
## | | \-backports (1.1.4)
## | \-withr (2.1.2)
## +-rlang (0.4.0)
## +-rprojroot (1.3-2)
## | \-backports (1.1.4)
## +-rstudioapi (0.10)
## \-withr (2.1.2)
}
}

}

\subsection{format()}{\preformatted{pkg_deps$format(...)
}

Format a \code{pkg_deps} object, typically for printing.
\subsection{Parameters}{
\itemize{
\item \code{...}: not used currently.
}
}

\subsection{Returns}{

A character vector, each element should be a line in the printout.
}

}

\subsection{print()}{\preformatted{pkg_deps$print(...)
}

Prints a \code{pkg_deps} object to the screen. The printout includes:
\itemize{
\item The package refs.
\item Whether the object has the resolved dependencies.
\item Whether the resolution had errors.
\item Whether the objevt has the solved dependencies.
\item Whether the solution had errors.
\item Advice on which methods to call next.
}

See the example below.
\subsection{Parameters}{
\itemize{
\item \code{...}: not used currently.
}
}

\subsection{Returns}{

The \code{pkg_deps} object itself, invisibly.
}

\subsection{Examples}{\preformatted{pd <- pkg_deps$new("r-lib/pkgdepends")
pd
}\preformatted{## <pkg_dependencies>
## + refs:
##   - r-lib/pkgdepends
## (use `$resolve()` to resolve dependencies)
## (use `$solve()` to solve dependencies)
}\preformatted{pd$resolve()
pd
}\preformatted{## <pkg_dependencies>
## + refs:
##   - r-lib/pkgdepends
## + has resolution (+44 dependencies)
## (use `$get_resolution()` to see resolution results)
## (use `$solve()` to solve dependencies)
}\preformatted{pd$solve()
pd
}\preformatted{## <pkg_dependencies>
## + refs:
##   - r-lib/pkgdepends
## + has resolution (+44 dependencies)
## + has solution
## (use `$get_resolution()` to see resolution results)
## (use `$get_solution()` to see solution results)
## (use `$draw()` to draw the dependency tree)
}
}

}

}
