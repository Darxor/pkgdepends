% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/install-tar.R
\name{external_untar_process}
\alias{external_untar_process}
\title{R6 class for an external untar process}
\description{
Uses the system's \code{tar} program, in a background process.

\if{html}{\out{<link rel="stylesheet" type="text/css" href="../doc/assets/extra.css"><script src="../doc/assets/rd.js"></script>}}
}
\keyword{internal}
\section{Super class}{
\code{\link[processx:process]{processx::process}} -> \code{\link[pkgdepends:external_untar_process]{pkgdepends::external_untar_process}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{external_untar_process$new()}}
}
}
\if{html}{\subsection{Inherited methods}{
\itemize{
\item \href{../../processx/html/process.html#method-as_ps_handle}{\code{processx::process$as_ps_handle()}}
\item \href{../../processx/html/process.html#method-finalize}{\code{processx::process$finalize()}}
\item \href{../../processx/html/process.html#method-format}{\code{processx::process$format()}}
\item \href{../../processx/html/process.html#method-get_cmdline}{\code{processx::process$get_cmdline()}}
\item \href{../../processx/html/process.html#method-get_cpu_times}{\code{processx::process$get_cpu_times()}}
\item \href{../../processx/html/process.html#method-get_error_connection}{\code{processx::process$get_error_connection()}}
\item \href{../../processx/html/process.html#method-get_error_file}{\code{processx::process$get_error_file()}}
\item \href{../../processx/html/process.html#method-get_exe}{\code{processx::process$get_exe()}}
\item \href{../../processx/html/process.html#method-get_exit_status}{\code{processx::process$get_exit_status()}}
\item \href{../../processx/html/process.html#method-get_input_connection}{\code{processx::process$get_input_connection()}}
\item \href{../../processx/html/process.html#method-get_input_file}{\code{processx::process$get_input_file()}}
\item \href{../../processx/html/process.html#method-get_memory_info}{\code{processx::process$get_memory_info()}}
\item \href{../../processx/html/process.html#method-get_name}{\code{processx::process$get_name()}}
\item \href{../../processx/html/process.html#method-get_output_connection}{\code{processx::process$get_output_connection()}}
\item \href{../../processx/html/process.html#method-get_output_file}{\code{processx::process$get_output_file()}}
\item \href{../../processx/html/process.html#method-get_pid}{\code{processx::process$get_pid()}}
\item \href{../../processx/html/process.html#method-get_poll_connection}{\code{processx::process$get_poll_connection()}}
\item \href{../../processx/html/process.html#method-get_result}{\code{processx::process$get_result()}}
\item \href{../../processx/html/process.html#method-get_start_time}{\code{processx::process$get_start_time()}}
\item \href{../../processx/html/process.html#method-get_status}{\code{processx::process$get_status()}}
\item \href{../../processx/html/process.html#method-get_username}{\code{processx::process$get_username()}}
\item \href{../../processx/html/process.html#method-get_wd}{\code{processx::process$get_wd()}}
\item \href{../../processx/html/process.html#method-has_error_connection}{\code{processx::process$has_error_connection()}}
\item \href{../../processx/html/process.html#method-has_input_connection}{\code{processx::process$has_input_connection()}}
\item \href{../../processx/html/process.html#method-has_output_connection}{\code{processx::process$has_output_connection()}}
\item \href{../../processx/html/process.html#method-has_poll_connection}{\code{processx::process$has_poll_connection()}}
\item \href{../../processx/html/process.html#method-interrupt}{\code{processx::process$interrupt()}}
\item \href{../../processx/html/process.html#method-is_alive}{\code{processx::process$is_alive()}}
\item \href{../../processx/html/process.html#method-is_incomplete_error}{\code{processx::process$is_incomplete_error()}}
\item \href{../../processx/html/process.html#method-is_incomplete_output}{\code{processx::process$is_incomplete_output()}}
\item \href{../../processx/html/process.html#method-is_supervised}{\code{processx::process$is_supervised()}}
\item \href{../../processx/html/process.html#method-kill}{\code{processx::process$kill()}}
\item \href{../../processx/html/process.html#method-kill_tree}{\code{processx::process$kill_tree()}}
\item \href{../../processx/html/process.html#method-poll_io}{\code{processx::process$poll_io()}}
\item \href{../../processx/html/process.html#method-print}{\code{processx::process$print()}}
\item \href{../../processx/html/process.html#method-read_all_error}{\code{processx::process$read_all_error()}}
\item \href{../../processx/html/process.html#method-read_all_error_lines}{\code{processx::process$read_all_error_lines()}}
\item \href{../../processx/html/process.html#method-read_all_output}{\code{processx::process$read_all_output()}}
\item \href{../../processx/html/process.html#method-read_all_output_lines}{\code{processx::process$read_all_output_lines()}}
\item \href{../../processx/html/process.html#method-read_error}{\code{processx::process$read_error()}}
\item \href{../../processx/html/process.html#method-read_error_lines}{\code{processx::process$read_error_lines()}}
\item \href{../../processx/html/process.html#method-read_output}{\code{processx::process$read_output()}}
\item \href{../../processx/html/process.html#method-read_output_lines}{\code{processx::process$read_output_lines()}}
\item \href{../../processx/html/process.html#method-resume}{\code{processx::process$resume()}}
\item \href{../../processx/html/process.html#method-signal}{\code{processx::process$signal()}}
\item \href{../../processx/html/process.html#method-supervise}{\code{processx::process$supervise()}}
\item \href{../../processx/html/process.html#method-suspend}{\code{processx::process$suspend()}}
\item \href{../../processx/html/process.html#method-wait}{\code{processx::process$wait()}}
\item \href{../../processx/html/process.html#method-write_input}{\code{processx::process$write_input()}}
}
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\if{html}{\out{<div class="r">}}
\preformatted{external_untar_process$new(
  tarfile,
  files = NULL,
  exdir = ".",
  restore_times = TRUE,
  tar = Sys.getenv("TAR", "tar"),
  post_process = NULL
)
}
\if{html}{\out{</div>}}
Start running the background process that extracts the file.
\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\tabular{rl}{
tarfile\tab Path to the \code{.tar} or \code{.tar.gz}, etc. file to
uncompress.\cr 

files\tab List of files to uncompress, see \code{\link[utils:untar]{utils::untar()}}.\cr 

exdir\tab Directory to extract the files to.\cr 

restore_times\tab Whether to restore modification files.\cr 

tar\tab Name of the external \code{tar} program. Defaults to
\code{TAR} environment variable, or \code{tar} if unset.\cr 

post_process\tab Function to call, once the extraction is
done, or \code{NULL}\cr 
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\describe{
New \code{r_untar_process} object.
}
}
}
}
