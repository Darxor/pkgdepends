% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkg-installation.R
\name{pkg_installation_proposal}
\alias{pkg_installation_proposal}
\title{A package installation proposal}
\description{
Typical workflow to install a set of packages:\preformatted{inst <- new_pkg_installation_proposal(refs, library)
inst$resolve()
inst$solve()
inst$download()
inst$install()
}
}
\section{Usage}{
\preformatted{inst <- new_pkg_installation_proposal(refs, library, upgrade = FALSE,
                             dependencies = NA)
inst <- pkg_installation_proposal$new(refs, config = list(),
                             policy = c("lazy", "upgrade"),
                             remote_types = NULL)

inst$get_refs()
inst$get_config()

inst$resolve()
inst$async_resolve()
inst$get_resolution()

inst$get_solve_policy()
inst$set_solve_policy(policy = c("lazy", "upgrade"))
inst$solve()
inst$get_solution()
inst$stop_for_solution_error()
inst$draw()

inst$download()
inst$async_download()
inst$get_downloads()
inst$stop_for_download_error()

inst$get_install_plan()
inst$install()
}
}

\section{Arguments}{

\itemize{
\item \code{refs}: Package names or references. See \link{pkg_refs} for the syntax.
\item \code{library}: Path to package library to install the packages to. If it
does not exist, it will be created.
\item \code{upgrade}: Whether to update packages (including dependencies)
to their latest available version.
\item \code{dependencies}: Whether dependent packages should be installed,
and which ones. Defaults to installing the required (recursive)
dependencies.
\item \code{config}: Configuration options, a named list. See \link{pkg_config}.
\item \code{policy}: Solution policy. See \link{pkg_solve}.
\item \code{remotes_types}: Custom remote ref types, this is for advanced use,
and experimental currently.
}
}

\section{Details}{


\code{\link[=new_pkg_installation_proposal]{new_pkg_installation_proposal()}} and \code{pkg_installation_proposal$new()}
both create a new package installation proposal object. The latter has
more options and it is for expert use.

\verb{$get_refs()} returns the refs of an installation proposal,
see \link{pkg_refs}.

\verb{$get_config()} returns the configuration, see \link{pkg_config}.

\verb{$resolve()} resolves all dependencies of the remote references of the
installation proposal. This usually involves downloading metadata from
CRAN and Bioconductor (unless already cached), and also from Github, if
GitHub refs are specified, either directly or indirectly. See
\link{pkg_resolution}.

\verb{$async_resolve()} is the asynchronous version of \verb{$resolve()}, it
uses deferred values, and it is currently for advanced use.

\verb{$get_resolution()} returns the result of the resolution, in a
\code{pkg_resolution_result} object, which is also a tibble. See
\link{pkg_resolution_result} for the format.

\verb{$get_solve_policy()} returns the policy of the dependency solver.
See \link{pkg_solve}.

\verb{$set_solve_policy()} sets the policy of the dependency solver. If this
policy changes, then you need to run \code{solve()} again. See \link{pkg_solve}.

\verb{$solve()} solves the package dependencies to work out the which
of the available versions of each needs to be installed to have a
properly working set of packages. See \link{pkg_solve}.

\verb{$get_solution()} returns the solution of the installation problem.

\verb{$stop_for_solution_error()} throws an error, with a meaningful error
message, if the previous \verb{$solve()} call failed.

\verb{$draw()} draws the package dependency tree of a solution. It only
works once \code{solve()} was called.

\verb{$download()} downloads all packages of the solution. It uses
the package cache in the pkgcache package by default, to avoid downloads
if possible.

\verb{$async_download()} downloads all packages of the solution,
asynchronously. It returns a deferred value, and it is currently for
advanced use.

\verb{$get_downloads()} returns data about the downloaded packages.
See the format at \link{pkg_download_result}.

\verb{$stop_for_download_error()} throws an error for a package download
error.

\verb{$get_install_plan()} returns the package installation plan of the
proposal.

\verb{$install()} performs the package installation plan.
}

