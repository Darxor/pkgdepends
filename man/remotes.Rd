% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/remotes.R
\name{remotes}
\alias{remotes}
\title{Class for package dependency resolution and package downloads}
\description{
Class for package dependency resolution and package downloads
}
\section{Usage}{
\preformatted{r <- remotes$new(specs, config = list())

r$resolve()
r$async_resolve()
r$get_resolution()
r$draw_tree(pkgs)

r$download()
r$async_download()
r$get_download_status()
}
}

\section{Arguments}{

\itemize{
\item \code{specs}: Package specifications. See 'Remote Types' below.
\item \code{config}: Custom configuration, a named list. See the list of options
below.
\item \code{pkgs}: Charcater vector of regular expressions, to specify the
packages to query.
}
}

\section{Details}{


\code{$new()} creates a new resolution/download task. The packages must be
supplied.

\code{$resolve()} resolves all remote packages, and their dependencies.
The result of the resolution is stored internally in the \code{remotes}
object, and also returned. It can be queried later with
\code{$get_resolution()}. See \code{Resolution Table} below.

\code{$async_resolve()} returns a deferred value for the resolution of
all remote packages. The deferred value resolves to the same value as
returned by \code{$resolve()}.

\code{$get_resolution()} returns the result of the resolution. See
\code{Resolution Table} below.

\code{$draw_tree()} draws the dependency tree of one or more packages,
after resolution.
}

\section{Remote types}{

The following remote types are currently supported:
\itemize{
\item CRAN packages:
\preformatted{
    [cran::]<package>[@[>=]<version> | @current | @last]
    }
\item Packages from GitHub repositories
\preformatted{
    [<package>=][github::]<username>/<repo>[/<subdir>]
    [@committish | #<pull> | @[*]release]
    }
}
}

\section{Resolution table}{


The data frame returned by \code{$resolve()} et al. has the following
columns:
\itemize{
\item \code{ref} The original remote reference.
\item \code{direct} Whether the reference was specified (\code{TRUE}), or it is a
dependency (\code{FALSE}).
\item \code{status} Status of the resolution: \code{"OK"} or \code{"FAILED"}.
\item \code{package} Name of the package.
\item \code{version} Package version.
\item \code{platform} Platform: \code{"source"}, \code{"macos"} or \code{"windows"} currently.
\item \code{rversion} If it is a binary package, which R version it was built for.
For source packages \code{"*"} is used.
\item \code{repodir} The relative directory of the package file in the repository.
\item \code{sources} URLs to download the package from. CRAN URLs are not stable,
so each row typically contains multiple URLs here.
\item \code{target} Relative path for the package file in the repository.
\item \code{fulltarget} Fulle path for the package file in the cache.
}
}

\section{Configuration options}{

\itemize{
\item \code{cache_dir} Path to the cache. By default a temporary directory is
used. (TODO)
\item \code{platforms} The platforms to use. Defaults to the current platform
on Windows and macOS and source.
\item \code{cran-mirror} The CRAN mirror to use. Defaults to \code{getOption("repos")}
or the cloud mirror if not set.
\item \code{dependencies} Dependencies to install. Defaults to the \emph{hard}
dependencies: \code{Depends}, \code{Imports}, \code{LinkingTo}.
\item \code{r-versions}: R version to support, for the binary packages. Defaults
to the running R version.
}
}

\examples{
## This does download a bunch of packages, so we don't run it currently
\dontrun{
rems <- remotes$new(c("dplyr", "r-lib/rcmdcheck"))
rems$resolve()
rems$download()
rems$get_download_status()
}
}
